pipeline {
    agent any

    environment {
        CLUSTER_NAME = 'tim-cluster'
        NAMESPACE = 'default'
        HELM_RELEASE_NAME = 'backend'
        IAM_TOKEN =''
    }

    parameters {
        booleanParam(name: 'DELETE_DEPLOY', defaultValue: false, description: 'Удалить деплой ?')
        string(name: 'IMAGE_TAG', defaultValue: '12', description: 'Тег образа для деплоя')
        choice(
            name: 'HELM_CHART_PATH',
            choices: ['./cicd/helm', './cicd/postgres', './cicd/redis'],
            description: 'Путь к Helm-чарту'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/kadyrov2/project-backend.git'
            }
        }

         stage('Create token IAM_TOKEN') {
             steps {
                 script {
                  
                   def IAM_TOKEN = sh(returnStdout: true, script: '~/yandex-cloud/bin/yc iam create-token').trim()
                   
                   sh """
                        docker login cr.yandex \
                            --username iam \
                            --password ${IAM_TOKEN}
                    """
                 }
             }
         }

         stage('login Yandex Container Registry') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'yandex-cloud-sa-key', variable: 'SA_KEY_FILE')]) {
                    sh """
                        ~/yandex-cloud/bin/yc config set service-account-key ${SA_KEY_FILE}
                    """
                    }
                    sh """
                        ~/yandex-cloud/bin/yc managed-kubernetes cluster get-credentials ${CLUSTER_NAME} --external --force
                    """
                }
            }
        }


        stage('Delete Deployment') {
            when {
                expression { params.DELETE_DEPLOY == true }
            }
            steps {
                script {
                    sh """
                        helm uninstall ${HELM_RELEASE_NAME} --namespace ${NAMESPACE}
                    """
                    echo "Деплой ${HELM_RELEASE_NAME} успешно удален."
                }
            }
        }

    stage('Deploy ') {
        when {
                expression { params.DELETE_DEPLOY == false }
            }
            steps {
                script {
                    def releaseNames = [
                        './cicd/helm': 'backend',
                        './cicd/postgres': 'postgres',
                        './cicd/redis': 'redis-cache'
                    ]
                    HELM_RELEASE_NAME = releaseNames.get(params.HELM_CHART_PATH, 'default-release')
                    
                    sh """
                        helm upgrade --install ${HELM_RELEASE_NAME} ${params.HELM_CHART_PATH} \
                            --namespace ${NAMESPACE} \
                            --create-namespace \
                            --set service.type=LoadBalancer \
                            --set image.tag=${params.IMAGE_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'backend успешно развернут с помощью Helm в Yandex Managed Kubernetes!'
        }
        failure {
            echo 'Ошибка при развертывании backend с помощью Helm.'
        }
    }
}